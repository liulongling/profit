<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.profit.base.mapper.BondBuyLogMapper">
  <resultMap id="BaseResultMap" type="com.profit.base.domain.BondBuyLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="gp_id" jdbcType="VARCHAR" property="gpId" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="cost" jdbcType="DOUBLE" property="cost" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="sell_count" jdbcType="INTEGER" property="sellCount" />
    <result column="sell_income" jdbcType="DOUBLE" property="sellIncome" />
    <result column="buy_date" jdbcType="VARCHAR" property="buyDate" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="oper_time" jdbcType="TIMESTAMP" property="operTime" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, gp_id, price, `count`, cost, `type`, sell_count, sell_income, buy_date, `status`,
    oper_time, remarks, create_time
  </sql>
  <select id="selectByExample" parameterType="com.profit.base.domain.BondBuyLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bond_buy_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bond_buy_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bond_buy_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.profit.base.domain.BondBuyLogExample">
    delete from bond_buy_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.profit.base.domain.BondBuyLog">
    insert into bond_buy_log (id, gp_id, price,
    `count`, cost, `type`, sell_count,
    sell_income, buy_date, `status`,
    oper_time, remarks, create_time
    )
    values (#{id,jdbcType=BIGINT}, #{gpId,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE},
    #{count,jdbcType=INTEGER}, #{cost,jdbcType=DOUBLE}, #{type,jdbcType=TINYINT}, #{sellCount,jdbcType=INTEGER},
    #{sellIncome,jdbcType=DOUBLE}, #{buyDate,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT},
    #{operTime,jdbcType=TIMESTAMP}, #{remarks,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.profit.base.domain.BondBuyLog">
    insert into bond_buy_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="gpId != null">
        gp_id,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="count != null">
        `count`,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="sellCount != null">
        sell_count,
      </if>
      <if test="sellIncome != null">
        sell_income,
      </if>
      <if test="buyDate != null">
        buy_date,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="operTime != null">
        oper_time,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="gpId != null">
        #{gpId,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DOUBLE},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="sellCount != null">
        #{sellCount,jdbcType=INTEGER},
      </if>
      <if test="sellIncome != null">
        #{sellIncome,jdbcType=DOUBLE},
      </if>
      <if test="buyDate != null">
        #{buyDate,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="operTime != null">
        #{operTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.profit.base.domain.BondBuyLogExample" resultType="java.lang.Long">
    select count(*) from bond_buy_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bond_buy_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.gpId != null">
        gp_id = #{record.gpId,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DOUBLE},
      </if>
      <if test="record.count != null">
        `count` = #{record.count,jdbcType=INTEGER},
      </if>
      <if test="record.cost != null">
        cost = #{record.cost,jdbcType=DOUBLE},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.sellCount != null">
        sell_count = #{record.sellCount,jdbcType=INTEGER},
      </if>
      <if test="record.sellIncome != null">
        sell_income = #{record.sellIncome,jdbcType=DOUBLE},
      </if>
      <if test="record.buyDate != null">
        buy_date = #{record.buyDate,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.operTime != null">
        oper_time = #{record.operTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bond_buy_log
    set id = #{record.id,jdbcType=BIGINT},
    gp_id = #{record.gpId,jdbcType=VARCHAR},
    price = #{record.price,jdbcType=DOUBLE},
    `count` = #{record.count,jdbcType=INTEGER},
    cost = #{record.cost,jdbcType=DOUBLE},
    `type` = #{record.type,jdbcType=TINYINT},
    sell_count = #{record.sellCount,jdbcType=INTEGER},
    sell_income = #{record.sellIncome,jdbcType=DOUBLE},
    buy_date = #{record.buyDate,jdbcType=VARCHAR},
    `status` = #{record.status,jdbcType=TINYINT},
    oper_time = #{record.operTime,jdbcType=TIMESTAMP},
    remarks = #{record.remarks,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.profit.base.domain.BondBuyLog">
    update bond_buy_log
    <set>
      <if test="gpId != null">
        gp_id = #{gpId,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="count != null">
        `count` = #{count,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DOUBLE},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=TINYINT},
      </if>
      <if test="sellCount != null">
        sell_count = #{sellCount,jdbcType=INTEGER},
      </if>
      <if test="sellIncome != null">
        sell_income = #{sellIncome,jdbcType=DOUBLE},
      </if>
      <if test="buyDate != null">
        buy_date = #{buyDate,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="operTime != null">
        oper_time = #{operTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.profit.base.domain.BondBuyLog">
    update bond_buy_log
    set gp_id = #{gpId,jdbcType=VARCHAR},
    price = #{price,jdbcType=DOUBLE},
    `count` = #{count,jdbcType=INTEGER},
    cost = #{cost,jdbcType=DOUBLE},
    `type` = #{type,jdbcType=TINYINT},
    sell_count = #{sellCount,jdbcType=INTEGER},
    sell_income = #{sellIncome,jdbcType=DOUBLE},
    buy_date = #{buyDate,jdbcType=VARCHAR},
    `status` = #{status,jdbcType=TINYINT},
    oper_time = #{operTime,jdbcType=TIMESTAMP},
    remarks = #{remarks,jdbcType=VARCHAR},
    create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="sumSellIncome" resultType="java.lang.Double">
    SELECT
    sum(sell_income)
    FROM
    bond_buy_log
    WHERE
    gp_id = #{gp_id,jdbcType=VARCHAR}
    AND
    type = #{type,jdbcType=TINYINT}
  </select>
  <select id="sumBuySellCount" resultType="map">
    SELECT
    SUM(COUNT) AS buyCount ,SUM(sell_count) AS sellCount
    FROM
    bond_buy_log
    WHERE gp_id = #{gp_id,jdbcType=VARCHAR}
    AND
    type = #{type,jdbcType=TINYINT}
  </select>
</mapper>