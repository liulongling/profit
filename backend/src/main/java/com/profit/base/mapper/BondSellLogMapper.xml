<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.profit.base.mapper.BondSellLogMapper">
  <resultMap id="BaseResultMap" type="com.profit.base.domain.BondSellLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="gp_id" jdbcType="VARCHAR" property="gpId" />
    <result column="buy_id" jdbcType="BIGINT" property="buyId" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="total_price" jdbcType="DOUBLE" property="totalPrice" />
    <result column="cost" jdbcType="DOUBLE" property="cost" />
    <result column="total_cost" jdbcType="DOUBLE" property="totalCost" />
    <result column="income" jdbcType="DOUBLE" property="income" />
    <result column="surplus_count" jdbcType="INTEGER" property="surplusCount" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, gp_id, buy_id, price, `count`, total_price, cost, total_cost, income, surplus_count,
    create_time
  </sql>
  <select id="selectByExample" parameterType="com.profit.base.domain.BondSellLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bond_sell_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from bond_sell_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bond_sell_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.profit.base.domain.BondSellLogExample">
    delete from bond_sell_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.profit.base.domain.BondSellLog">
    insert into bond_sell_log (id, gp_id, buy_id,
    price, `count`, total_price,
    cost, total_cost, income,
    surplus_count, create_time)
    values (#{id,jdbcType=BIGINT}, #{gpId,jdbcType=VARCHAR}, #{buyId,jdbcType=BIGINT},
    #{price,jdbcType=DOUBLE}, #{count,jdbcType=INTEGER}, #{totalPrice,jdbcType=DOUBLE},
    #{cost,jdbcType=DOUBLE}, #{totalCost,jdbcType=DOUBLE}, #{income,jdbcType=DOUBLE},
    #{surplusCount,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.profit.base.domain.BondSellLog">
    insert into bond_sell_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="gpId != null">
        gp_id,
      </if>
      <if test="buyId != null">
        buy_id,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="count != null">
        `count`,
      </if>
      <if test="totalPrice != null">
        total_price,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="totalCost != null">
        total_cost,
      </if>
      <if test="income != null">
        income,
      </if>
      <if test="surplusCount != null">
        surplus_count,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="gpId != null">
        #{gpId,jdbcType=VARCHAR},
      </if>
      <if test="buyId != null">
        #{buyId,jdbcType=BIGINT},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null">
        #{totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DOUBLE},
      </if>
      <if test="totalCost != null">
        #{totalCost,jdbcType=DOUBLE},
      </if>
      <if test="income != null">
        #{income,jdbcType=DOUBLE},
      </if>
      <if test="surplusCount != null">
        #{surplusCount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.profit.base.domain.BondSellLogExample" resultType="java.lang.Long">
    select count(*) from bond_sell_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bond_sell_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.gpId != null">
        gp_id = #{record.gpId,jdbcType=VARCHAR},
      </if>
      <if test="record.buyId != null">
        buy_id = #{record.buyId,jdbcType=BIGINT},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DOUBLE},
      </if>
      <if test="record.count != null">
        `count` = #{record.count,jdbcType=INTEGER},
      </if>
      <if test="record.totalPrice != null">
        total_price = #{record.totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.cost != null">
        cost = #{record.cost,jdbcType=DOUBLE},
      </if>
      <if test="record.totalCost != null">
        total_cost = #{record.totalCost,jdbcType=DOUBLE},
      </if>
      <if test="record.income != null">
        income = #{record.income,jdbcType=DOUBLE},
      </if>
      <if test="record.surplusCount != null">
        surplus_count = #{record.surplusCount,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bond_sell_log
    set id = #{record.id,jdbcType=BIGINT},
    gp_id = #{record.gpId,jdbcType=VARCHAR},
    buy_id = #{record.buyId,jdbcType=BIGINT},
    price = #{record.price,jdbcType=DOUBLE},
    `count` = #{record.count,jdbcType=INTEGER},
    total_price = #{record.totalPrice,jdbcType=DOUBLE},
    cost = #{record.cost,jdbcType=DOUBLE},
    total_cost = #{record.totalCost,jdbcType=DOUBLE},
    income = #{record.income,jdbcType=DOUBLE},
    surplus_count = #{record.surplusCount,jdbcType=INTEGER},
    create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.profit.base.domain.BondSellLog">
    update bond_sell_log
    <set>
      <if test="gpId != null">
        gp_id = #{gpId,jdbcType=VARCHAR},
      </if>
      <if test="buyId != null">
        buy_id = #{buyId,jdbcType=BIGINT},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="count != null">
        `count` = #{count,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null">
        total_price = #{totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DOUBLE},
      </if>
      <if test="totalCost != null">
        total_cost = #{totalCost,jdbcType=DOUBLE},
      </if>
      <if test="income != null">
        income = #{income,jdbcType=DOUBLE},
      </if>
      <if test="surplusCount != null">
        surplus_count = #{surplusCount,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.profit.base.domain.BondSellLog">
    update bond_sell_log
    set gp_id = #{gpId,jdbcType=VARCHAR},
    buy_id = #{buyId,jdbcType=BIGINT},
    price = #{price,jdbcType=DOUBLE},
    `count` = #{count,jdbcType=INTEGER},
    total_price = #{totalPrice,jdbcType=DOUBLE},
    cost = #{cost,jdbcType=DOUBLE},
    total_cost = #{totalCost,jdbcType=DOUBLE},
    income = #{income,jdbcType=DOUBLE},
    surplus_count = #{surplusCount,jdbcType=INTEGER},
    create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="listGroupByGpId" resultType="map">
    SELECT gp_id as gpId,sum(income) as income FROM bond_sell_log
    <where>
      <if test="request.startTime != null and request.endTime != null">
        create_time BETWEEN #{request.startTime} AND #{request.endTime}
      </if>
    </where>
    GROUP BY gp_id
  </select>

  <select id="listGroupByDate"  resultType="map">
    SELECT
    DATE_FORMAT(a.create_time, '%Y%m') as date,sum(a.income) as income
    FROM
    bond_sell_log as a,bond_buy_log as b
    <where>
      a.buy_id = b.id
      AND
      <if test="request.startTime != null and request.endTime != null">
        a.create_time BETWEEN #{request.startTime} AND #{request.endTime}
      </if>
      AND
      <if test="request.type != null ">
        b.type = #{request.type}
      </if>
    </where>
    GROUP BY DATE_FORMAT(a.create_time, '%Y%m') desc;
  </select>
</mapper>